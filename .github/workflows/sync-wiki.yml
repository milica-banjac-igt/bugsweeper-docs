name: BugSweeper Wiki to PDF

on:
  # Run every night at 1:00 AM UTC
  schedule:
    - cron: '0 1 * * *'
  # Allow manual triggering
  workflow_dispatch:

jobs:
  convert-wiki-to-pdf:
    runs-on: ubuntu-latest
    steps:
      # Checkout the target repository where PDFs will be pushed
      - name: Checkout destination repository
        uses: actions/checkout@v3
        with:
          repository: milica-banjac-igt/bugsweeper-docs
          path: bugsweeper-docs
          # Use a fine-grained PAT stored in repository secrets
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      # Clone the wiki repository
      - name: Clone wiki repository
        run: |
          git clone https://github.com/igt-all/BugSweeper-Workshops.wiki.git wiki-source
        shell: bash
      
      - name: List wiki contents
        run: |
          echo "Wiki repo contents:"
          ls -la wiki-source/
          echo "Checking for markdown files:"
          find wiki-source -name "*.md" | sort
        shell: bash
      
      # Download images from GitHub if they exist
      - name: Setup Images directory
        run: |
          mkdir -p wiki-source/Images
          
          # Find all image references in markdown files
          echo "Extracting image references from Markdown files..."
          grep -r '!\[.*\](.*user-attachments/assets/[a-zA-Z0-9-]*)' wiki-source --include="*.md" | cut -d'(' -f2 | cut -d')' -f1 > image_urls.txt
          
          if [ -s image_urls.txt ]; then
            echo "Found image URLs:"
            cat image_urls.txt
            
            # Download placeholder images - we can't directly access user-attachments
            # We'll use placeholder images with the original filenames
            mkdir -p placeholder_images
            cat image_urls.txt | while read url; do
              hash=$(echo "$url" | sed 's|.*/||')
              echo "Creating placeholder for $hash"
              # Create a simple HTML file as placeholder (will be visible in the PDF)
              echo "<div style='border:1px solid #ddd; padding:10px; text-align:center; background:#f8f8f8; margin:10px;'><p>Image placeholder for: $hash</p><p>The original image is only available in GitHub UI</p></div>" > "placeholder_images/$hash.html"
              cp "placeholder_images/$hash.html" "wiki-source/Images/$hash.png"
            done
          else
            echo "No image references found"
          fi
          
          # If there's an existing Images directory in the wiki-source, preserve its contents
          if [ -d "wiki-source/Images" ]; then
            echo "Found Images directory in wiki repo:"
            ls -la wiki-source/Images/
          else
            echo "No Images directory found in wiki repo, creating one"
            mkdir -p wiki-source/Images
          fi
        shell: bash
      
      # Install required tools
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc wkhtmltopdf
        shell: bash
      
      # Process and modify markdown files to use local image references
      - name: Process markdown files
        run: |
          for mdfile in wiki-source/*.md; do
            if [ -f "$mdfile" ]; then
              echo "Processing $mdfile"
              
              # Replace GitHub attachment URLs with local references
              sed -i 's|https://github.com/user-attachments/assets/\([a-zA-Z0-9-]*\)|./Images/\1.png|g' "$mdfile"
              
              # Add a note about images at the top
              sed -i '1i > **Note:** Some images in this document are replaced with placeholders as they are only available in the GitHub UI.\n\n' "$mdfile"
            fi
          done
        shell: bash
      
      # Generate PDFs from markdown files
      - name: Generate PDFs
        run: |
          mkdir -p pdfs
          
          # Loop through each markdown file
          for mdfile in wiki-source/*.md; do
            if [ -f "$mdfile" ] && [[ ! "$(basename "$mdfile")" =~ ^wiki-sync-readme ]]; then
              filename=$(basename "$mdfile")
              pdfname="${filename%.md}.pdf"
              echo "Converting $filename to PDF..."
              
              # Convert Markdown to HTML first for better image handling
              pandoc "$mdfile" -o "temp.html" --standalone
              
              # Convert HTML to PDF
              wkhtmltopdf --enable-local-file-access "temp.html" "pdfs/$pdfname"
              
              if [ -f "pdfs/$pdfname" ]; then
                echo "Successfully generated $pdfname"
              else
                echo "Failed to generate PDF for $filename, creating basic version..."
                echo "<html><body><h1>$(basename "$filename" .md)</h1><p>PDF conversion failed. Please check the original markdown file.</p></body></html>" > "basic.html"
                wkhtmltopdf "basic.html" "pdfs/$pdfname" || touch "pdfs/$pdfname"
                rm -f "basic.html"
              fi
            fi
          done
          
          # List generated PDFs
          echo "Generated PDFs:"
          ls -la pdfs/
        shell: bash
      
      # Copy PDFs to the docs repository
      - name: Copy PDFs to docs repository
        run: |
          mkdir -p bugsweeper-docs/workshop-pdfs
          cp -f pdfs/*.pdf bugsweeper-docs/workshop-pdfs/ || true
          
          # List PDFs
          echo "PDFs in destination folder:"
          ls -la bugsweeper-docs/workshop-pdfs/
        shell: bash
      
      # Create index.html
      - name: Create index.html
        run: |
          cat > bugsweeper-docs/index.html << EOL
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>BugSweeper Workshops Documentation</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      line-height: 1.6;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                  }
                  h1 {
                      color: #333;
                      text-align: center;
                  }
                  .pdf-list {
                      list-style: none;
                      padding: 0;
                  }
                  .pdf-list li {
                      margin: 10px 0;
                      padding: 10px;
                      background-color: #f5f5f5;
                      border-radius: 5px;
                  }
                  .pdf-list a {
                      color: #0066cc;
                      text-decoration: none;
                      font-weight: bold;
                  }
                  .pdf-list a:hover {
                      text-decoration: underline;
                  }
                  .timestamp {
                      color: #666;
                      font-size: 0.8em;
                      text-align: center;
                      margin-top: 40px;
                  }
              </style>
          </head>
          <body>
              <h1>BugSweeper Workshops Documentation</h1>
              <p>This page provides access to the latest PDF documentation for the BugSweeper Workshops.</p>
              
              <ul class="pdf-list">
          EOL
          
          # Add links to each PDF file
          for pdf in bugsweeper-docs/workshop-pdfs/*.pdf; do
            if [ -f "$pdf" ]; then
              filename=$(basename "$pdf")
              name=$(echo "${filename%.pdf}" | sed 's/-‚Äê-/ - /g')
              echo "    <li><a href=\"workshop-pdfs/$filename\" target=\"_blank\">$name</a></li>" >> bugsweeper-docs/index.html
            fi
          done
          
          # Add last updated date
          cat >> bugsweeper-docs/index.html << EOL
              </ul>
              
              <p class="timestamp">Last updated: $(date '+%B %d, %Y %H:%M') UTC</p>
          </body>
          </html>
          EOL
        shell: bash
      
      # Commit and push changes
      - name: Configure Git
        run: |
          cd bugsweeper-docs
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
        shell: bash
      
      - name: Commit changes
        run: |
          cd bugsweeper-docs
          git add workshop-pdfs/*.pdf index.html
          git commit -m "Updated workshop PDFs - $(date '+%Y-%m-%d %H:%M')" || echo "No changes to commit"
        shell: bash
      
      - name: Push changes
        run: |
          cd bugsweeper-docs
          git push
        shell: bash
