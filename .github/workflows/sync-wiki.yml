name: Sync Wiki to GitHub Pages

on:
  schedule:
    # Run at 1:00 AM UTC every day (adjust as needed)
    - cron: '0 1 * * *'
  # Allow manual triggering from the GitHub Actions tab
  workflow_dispatch:

jobs:
  sync-wiki-to-pages:
    runs-on: ubuntu-latest  # Changed to Ubuntu for better tool support
    steps:
      - name: Check out bugsweeper-docs repository
        uses: actions/checkout@v3
        with:
          repository: milica-banjac-igt/bugsweeper-docs
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: bugsweeper-docs

      - name: Set up Git identity
        run: |
          git config --global user.email "wiki-sync@example.com"
          git config --global user.name "Wiki Sync Action"

      # Using git clone with token embedded instead of actions/checkout for the wiki
      - name: Clone wiki repository with embedded token
        run: |
          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/igt-all/BugSweeper-Workshops.wiki.git wiki-repo
        shell: bash

      - name: Copy images directory to ensure proper file access
        run: |
          mkdir -p output-files
          cp -r wiki-repo/Images output-files/
        shell: bash

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc wkhtmltopdf
        shell: bash

      - name: Process images
        run: |
          cd wiki-repo
          # Create a script for image processing
          cat > process-images.sh << 'EOL'
          #!/bin/bash
          for mdfile in *.md; do
            echo "Processing file: $mdfile"
            content=$(cat "$mdfile")
            
            # Find unique GitHub asset URLs and replace them
            grep -o 'https://github.com/user-attachments/assets/[a-zA-Z0-9-]*' "$mdfile" | sort | uniq | while read url; do
              hash=$(echo "$url" | sed 's|.*/||')
              image=$(find ./Images -type f -name "*$hash*" -o -name "$hash.*" | head -1)
              
              if [ -n "$image" ]; then
                localpath="./Images/$(basename "$image")"
                echo "Replacing $url with $localpath"
                sed -i "s|$url|$localpath|g" "$mdfile"
              else
                echo "No local image found for hash: $hash"
              fi
            done
            
            echo "Updated file: $mdfile"
          done
          echo "Process completed!"
          EOL
          
          chmod +x process-images.sh
          ./process-images.sh
        shell: bash

      - name: Generate PDFs
        run: |
          cd wiki-repo
          mkdir -p ../output-files/pdfs
          
          # Get all MD files but exclude readme files for the sync scripts
          for mdfile in $(ls -1 *.md | grep -v "wiki-sync-readme"); do
            pdffile="../output-files/pdfs/$(basename "${mdfile%.md}.pdf")"
            echo "Converting $mdfile to PDF..."
            
            # Use wkhtmltopdf instead of pandoc+xelatex
            pandoc "$mdfile" -o "$pdffile" --pdf-engine=wkhtmltopdf
            
            if [ ! -f "$pdffile" ]; then
              echo "Failed to create PDF for $mdfile, trying alternative method..."
              # Fallback to direct wkhtmltopdf if pandoc fails
              pandoc "$mdfile" -o temp.html
              wkhtmltopdf temp.html "$pdffile"
              rm temp.html
            fi
            
            echo "PDF generation for $mdfile complete"
          done
        shell: bash

      - name: Copy PDFs to bugsweeper-docs repository
        run: |
          # Create workshop-pdfs directory if it doesn't exist
          mkdir -p bugsweeper-docs/workshop-pdfs
          
          # Copy PDF files
          cp -f output-files/pdfs/*.pdf bugsweeper-docs/workshop-pdfs/ || true
          
          # List files to debug
          echo "Files in output-files/pdfs:"
          ls -la output-files/pdfs/
          echo "Files in bugsweeper-docs/workshop-pdfs:"
          ls -la bugsweeper-docs/workshop-pdfs/
        shell: bash

      - name: Create index.html
        run: |
          cd bugsweeper-docs
          
          # Generate index.html
          cat > index.html << EOL
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>BugSweeper Workshops Documentation</title>
              <style>
                  body {
                      font-family: Arial, sans-serif;
                      line-height: 1.6;
                      max-width: 800px;
                      margin: 0 auto;
                      padding: 20px;
                  }
                  h1 {
                      color: #333;
                      text-align: center;
                  }
                  .pdf-list {
                      list-style: none;
                      padding: 0;
                  }
                  .pdf-list li {
                      margin: 10px 0;
                      padding: 10px;
                      background-color: #f5f5f5;
                      border-radius: 5px;
                  }
                  .pdf-list a {
                      color: #0066cc;
                      text-decoration: none;
                      font-weight: bold;
                  }
                  .pdf-list a:hover {
                      text-decoration: underline;
                  }
                  .timestamp {
                      color: #666;
                      font-size: 0.8em;
                      text-align: center;
                      margin-top: 40px;
                  }
              </style>
          </head>
          <body>
              <h1>BugSweeper Workshops Documentation</h1>
              <p>This page provides access to the latest PDF documentation for the BugSweeper Workshops.</p>
              
              <ul class="pdf-list">
          EOL
          
          # Add links to each PDF file
          for pdf in workshop-pdfs/*.pdf; do
            if [ -f "$pdf" ]; then
              filename=$(basename "$pdf")
              name=$(echo "${filename%.pdf}" | sed 's/-‚Äê-/ - /g')
              echo "    <li><a href=\"$pdf\" target=\"_blank\">$name</a></li>" >> index.html
            fi
          done
          
          # Close the HTML content
          cat >> index.html << EOL
              </ul>
              
              <p class="timestamp">Last updated: $(date '+%B %d, %Y %H:%M')</p>
          </body>
          </html>
          EOL
          
          echo "Created index.html file"
        shell: bash

      - name: Commit and push changes to GitHub Pages
        run: |
          cd bugsweeper-docs
          git add --all
          git commit -m "Updated workshop PDFs - $(date '+%Y-%m-%d %H:%M')"
          git push origin main
        shell: bash
